import {
  useUncontrolled
} from "./chunk-ZBUXNRRY.js";
import {
  CloseButton_default,
  Fade_default
} from "./chunk-DWWP7Q5C.js";
import {
  useEventCallback
} from "./chunk-3CUIW3UM.js";
import "./chunk-XY35XOXX.js";
import {
  useButtonProps
} from "./chunk-KQCZFCNO.js";
import {
  divWithClassName_default
} from "./chunk-Z4LWTPG4.js";
import "./chunk-M4KIEVLJ.js";
import {
  createWithBsPrefix
} from "./chunk-DVB5QNWC.js";
import {
  require_classnames,
  useBootstrapPrefix
} from "./chunk-DQM5HLBA.js";
import {
  require_jsx_runtime
} from "./chunk-ERD5GGZY.js";
import {
  __toESM,
  require_react
} from "./chunk-C3URVCCN.js";

// node_modules/react-bootstrap/esm/Alert.js
var import_classnames = __toESM(require_classnames());
var React2 = __toESM(require_react());

// node_modules/@restart/ui/esm/Anchor.js
var React = __toESM(require_react());

// node_modules/@restart/hooks/esm/useCallbackRef.js
var import_react = __toESM(require_react());

// node_modules/@restart/hooks/esm/useEventListener.js
var import_react2 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useGlobalListener.js
var import_react3 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useInterval.js
var import_react4 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useRafInterval.js
var import_react5 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useMergeState.js
var import_react6 = __toESM(require_react());

// node_modules/@restart/hooks/esm/usePrevious.js
var import_react7 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useImage.js
var import_react8 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useResizeObserver.js
var import_react10 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useIsomorphicEffect.js
var import_react9 = __toESM(require_react());
var isReactNative = typeof global !== "undefined" && global.navigator && global.navigator.product === "ReactNative";

// node_modules/@restart/ui/esm/Anchor.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["onKeyDown"];
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function isTrivialHref(href) {
  return !href || href.trim() === "#";
}
var Anchor = React.forwardRef((_ref, ref) => {
  let {
    onKeyDown
  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded);
  const [buttonProps] = useButtonProps(Object.assign({
    tagName: "a"
  }, props));
  const handleKeyDown = useEventCallback((e) => {
    buttonProps.onKeyDown(e);
    onKeyDown == null ? void 0 : onKeyDown(e);
  });
  if (isTrivialHref(props.href) || props.role === "button") {
    return (0, import_jsx_runtime.jsx)("a", Object.assign({
      ref
    }, props, buttonProps, {
      onKeyDown: handleKeyDown
    }));
  }
  return (0, import_jsx_runtime.jsx)("a", Object.assign({
    ref
  }, props, {
    onKeyDown
  }));
});
Anchor.displayName = "Anchor";
var Anchor_default = Anchor;

// node_modules/react-bootstrap/esm/Alert.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var DivStyledAsH4 = divWithClassName_default("h4");
DivStyledAsH4.displayName = "DivStyledAsH4";
var AlertHeading = createWithBsPrefix("alert-heading", {
  Component: DivStyledAsH4
});
var AlertLink = createWithBsPrefix("alert-link", {
  Component: Anchor_default
});
var defaultProps = {
  variant: "primary",
  show: true,
  transition: Fade_default,
  closeLabel: "Close alert"
};
var Alert = React2.forwardRef((uncontrolledProps, ref) => {
  const {
    bsPrefix,
    show,
    closeLabel,
    closeVariant,
    className,
    children,
    variant,
    onClose,
    dismissible,
    transition,
    ...props
  } = useUncontrolled(uncontrolledProps, {
    show: "onClose"
  });
  const prefix = useBootstrapPrefix(bsPrefix, "alert");
  const handleClose = useEventCallback((e) => {
    if (onClose) {
      onClose(false, e);
    }
  });
  const Transition = transition === true ? Fade_default : transition;
  const alert = (0, import_jsx_runtime3.jsxs)("div", {
    role: "alert",
    ...!Transition ? props : void 0,
    ref,
    className: (0, import_classnames.default)(className, prefix, variant && `${prefix}-${variant}`, dismissible && `${prefix}-dismissible`),
    children: [dismissible && (0, import_jsx_runtime2.jsx)(CloseButton_default, {
      onClick: handleClose,
      "aria-label": closeLabel,
      variant: closeVariant
    }), children]
  });
  if (!Transition)
    return show ? alert : null;
  return (0, import_jsx_runtime2.jsx)(Transition, {
    unmountOnExit: true,
    ...props,
    ref: void 0,
    in: show,
    children: alert
  });
});
Alert.displayName = "Alert";
Alert.defaultProps = defaultProps;
var Alert_default = Object.assign(Alert, {
  Link: AlertLink,
  Heading: AlertHeading
});
export {
  Alert_default as default
};
//# sourceMappingURL=react-bootstrap_Alert.js.map
